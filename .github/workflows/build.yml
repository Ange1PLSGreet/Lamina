name: Build Lamina Interpreter

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-2025, macos-latest]
        build_type: [Release, Debug]
        include:
          - os: ubuntu-latest
            compiler: gcc
            cmake_generator: "Unix Makefiles"
          - os: windows-2025
            compiler: msvc
            cmake_generator: "Visual Studio 17 2022"
            cmake_arch: "-A x64"
          - os: macos-latest
            compiler: clang
            cmake_generator: "Unix Makefiles"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.31.6'

      - name: Set up build environment (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build

      - name: Set up build environment (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install cmake ninja

      - name: Set up MSVC (Windows)
        if: matrix.os == 'windows-2025'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Initialize Git submodules
        run: |
          git submodule update --init --recursive

      - name: Configure CMake
        run: |
          cmake -B build ${{ matrix.cmake_arch }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -G "${{ matrix.cmake_generator }}" .

      - name: Build with CMake
        run: |
          cmake --build build --config ${{ matrix.build_type }} --parallel

      - name: Test basic functionality
        working-directory: build
        shell: bash
        run: |
          echo "Testing basic functionality..."
          
          # Create a simple test file
          echo 'print("Hello, Lamina!");' > test.lm
          echo 'var x = 2 + 3;' >> test.lm
          echo 'print("2 + 3 =", x);' >> test.lm
          
          if [ "${{ matrix.os }}" = "windows-2025" ]; then
            ./${{ matrix.build_type }}/Lamina.exe test.lm
          else
            ./Lamina test.lm
          fi
          
          echo "Basic test passed!"

      - name: Run example programs
        working-directory: build
        shell: bash
        run: |
          echo "Running example programs..."
          
          # Test all example files if they exist
          if [ -d "../interpreter/examples" ]; then
            for example in ../interpreter/examples/*.lm; do
              if [ -f "$example" ]; then
                echo "Testing $example..."
                if [ "${{ matrix.os }}" = "windows-2025" ]; then
                  ./${{ matrix.build_type }}/Lamina.exe "$example" || echo "Warning: $example failed"
                else
                  ./Lamina "$example" || echo "Warning: $example failed"
                fi
              fi
            done
          else
            echo "No examples directory found, skipping example tests"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lamina-${{ matrix.os }}-${{ matrix.build_type }}
          path: |
            build/${{ matrix.os == 'windows-2025' && format('{0}/Lamina.exe', matrix.build_type) || 'Lamina' }}
            build/${{ matrix.os == 'windows-2025' && format('{0}/*.dll', matrix.build_type) || '*.so' }}
            interpreter/examples/
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release assets
        run: |
          mkdir -p release
          
          # Package Linux build
          if [ -d "artifacts/lamina-ubuntu-latest-Release" ]; then
            cd artifacts/lamina-ubuntu-latest-Release
            tar -czf ../../release/lamina-linux-x64.tar.gz Lamina *.so examples/ 2>/dev/null || tar -czf ../../release/lamina-linux-x64.tar.gz Lamina examples/
            cd ../..
          fi
          
          # Package Windows build
          if [ -d "artifacts/lamina-windows-2025-Release" ]; then
            cd artifacts/lamina-windows-2025-Release
            zip -r ../../release/lamina-windows-x64.zip Lamina.exe *.dll examples/ 2>/dev/null || zip -r ../../release/lamina-windows-x64.zip Lamina.exe examples/
            cd ../..
          fi
          
          # Package macOS build
          if [ -d "artifacts/lamina-macos-latest-Release" ]; then
            cd artifacts/lamina-macos-latest-Release
            tar -czf ../../release/lamina-macos-x64.tar.gz Lamina *.dylib examples/ 2>/dev/null || tar -czf ../../release/lamina-macos-x64.tar.gz Lamina examples/
            cd ../..
          fi
          
          ls -la release/

      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: lamina-release-packages
          path: release/
          retention-days: 90
