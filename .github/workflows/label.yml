name: PR Auto Labeler

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  label:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
      repository-projects: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Auto-label PR
        uses: actions/labeler@v5
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          configuration-path: .github/labeler.yml
          sync-labels: true
          dot: true
        continue-on-error: true

      - name: Fallback labeling (if main labeler fails)
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            try {
              // 获取 PR 信息
              const { data: pullRequest } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
              });
              
              // 获取修改的文件
              const { data: files } = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
              });
              
              const labels = [];
              
              // 简单的文件路径标签逻辑
              const filePatterns = {
                'core': /^interpreter\//,
                'extensions': /^extensions\//,
                'documentation': /\.(md|txt)$|^docs?\//,
                'build': /CMakeLists\.txt$|\.github\/workflows\//,
                'examples': /^examples\/|\.lamina$|\.lm$/,
                'config': /\.(yml|yaml|json|ini|cfg)$|\.github\//
              };
              
              for (const file of files) {
                for (const [label, pattern] of Object.entries(filePatterns)) {
                  if (pattern.test(file.filename) && !labels.includes(label)) {
                    labels.push(label);
                  }
                }
              }
              
              // 添加标签
              if (labels.length > 0) {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  labels: labels,
                });
                
                console.log(`Added labels: ${labels.join(', ')}`);
              }
              
            } catch (error) {
              console.log(`Fallback labeling failed: ${error.message}`);
              // 即使失败也不要让工作流失败
            }
