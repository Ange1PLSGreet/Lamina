name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: linux
            executable: Lamina
            archive: tar.gz
            cmake_generator: "Unix Makefiles"
          - os: windows-latest
            name: windows
            executable: Lamina.exe
            archive: zip
            cmake_generator: "Visual Studio 17 2022"
            cmake_arch: "-A x64"
          - os: macos-latest
            name: macos
            executable: Lamina
            archive: tar.gz
            cmake_generator: "Unix Makefiles"

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.16.3'

    - name: Setup build environment (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build

    - name: Setup build environment (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake ninja

    - name: Setup MSVC (Windows)
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Initialize Git submodules
      run: |
        git submodule update --init --recursive

    - name: Configure CMake
      run: |
        cmake -B build ${{ matrix.cmake_arch }} -DCMAKE_BUILD_TYPE=Release -G "${{ matrix.cmake_generator }}" .

    - name: Build with CMake
      run: |
        echo "Building Lamina for ${{ matrix.name }} using CMake..."
        cmake --build build --config Release --parallel
        echo "Build completed successfully!"
        
    - name: Prepare release package
      shell: bash
      run: |
        mkdir -p release-temp
        
        # Copy executable from build directory
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp build/Release/${{ matrix.executable }} release-temp/
          # Copy DLLs
          cp build/Release/*.dll release-temp/ 2>/dev/null || echo "No DLLs to copy"
        else
          cp build/${{ matrix.executable }} release-temp/
          # Copy shared libraries
          cp build/*.so release-temp/ 2>/dev/null || echo "No .so files to copy"
          cp build/*.dylib release-temp/ 2>/dev/null || echo "No .dylib files to copy"
        fi
        
        # Copy examples if they exist
        if [ -d "interpreter/examples" ]; then
          cp -r interpreter/examples release-temp/
        fi
        
        # Copy documentation
        cp README.md release-temp/ 2>/dev/null || echo "README.md not found"
        cp LICENSE release-temp/ 2>/dev/null || echo "LICENSE not found"
        
        # Create version info
        echo "Lamina Interpreter" > release-temp/VERSION.txt
        echo "Build date: $(date)" >> release-temp/VERSION.txt
        echo "Platform: ${{ matrix.name }}" >> release-temp/VERSION.txt
        echo "Build system: CMake" >> release-temp/VERSION.txt
        
        if [ "${{ github.ref_type }}" = "tag" ]; then
          echo "Version: ${{ github.ref_name }}" >> release-temp/VERSION.txt
        else
          echo "Version: ${{ github.sha }}" >> release-temp/VERSION.txt
        fi
        # List contents for debugging
        echo "Release package contents:"
        ls -la release-temp/

    - name: Create archive (Linux/macOS)
      if: matrix.archive == 'tar.gz'
      shell: bash
      run: |
        cd release-temp
        tar -czf ../lamina-${{ matrix.name }}-x64.tar.gz *
        cd ..

    - name: Create archive (Windows)
      if: matrix.archive == 'zip'
      run: |
        Compress-Archive -Path "release-temp\*" -DestinationPath "lamina-${{ matrix.name }}-x64.zip" -Force

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: lamina-${{ matrix.name }}-x64
        path: lamina-${{ matrix.name }}-x64.*

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Debug artifacts
      run: |
        echo "Listing all artifacts:"
        find artifacts -type f -name "*.tar.gz" -o -name "*.zip" | head -20
        echo "Artifact directory structure:"
        ls -la artifacts/
        
    - name: Get tag annotation
      id: tag_data
      run: |
        # 获取标签注释信息
        TAG_MESSAGE=$(git tag -l --format='%(contents)' ${{ github.ref_name }})
        
        # 如果有标签注释，使用它；否则使用默认内容
        if [ -n "$TAG_MESSAGE" ]; then
          echo "HAS_ANNOTATION=true" >> $GITHUB_OUTPUT
          # 转义换行符以便在 GitHub Actions 中使用
          echo "TAG_CONTENT<<EOF" >> $GITHUB_OUTPUT
          echo "$TAG_MESSAGE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "HAS_ANNOTATION=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref_name }}
        name: Lamina ${{ github.ref_name }}
        body: |
          ${{ steps.tag_data.outputs.HAS_ANNOTATION == 'true' && steps.tag_data.outputs.TAG_CONTENT || format('## Lamina Interpreter {0}
          
          ###  新版本发布
          
          这是 Lamina 解释器的 {0} 版本。使用 CMake 构建系统编译。
          
          ###  下载说明
          
          - **Linux**: 下载 `lamina-linux-x64.tar.gz`
          - **Windows**: 下载 `lamina-windows-x64.zip`  
          - **macOS**: 下载 `lamina-macos-x64.tar.gz`
          
          ###  使用方法
          
          1. 解压下载的文件
          2. 运行解释器:
             ```bash
             # 交互模式
             ./Lamina
             
             # 执行脚本
             ./Lamina script.lm
             ```
          
          ###  系统要求
          
          - **Linux**: glibc 2.17+ (大多数现代发行版)
          - **Windows**: Windows 10+ (包含所需的 Visual C++ 运行时)
          - **macOS**: macOS 10.15+ (Catalina)
          ', github.ref_name, github.ref_name) }}
        draft: false
        prerelease: false
        files: |
          artifacts/lamina-linux-x64/lamina-linux-x64.tar.gz
          artifacts/lamina-windows-x64/lamina-windows-x64.zip
          artifacts/lamina-macos-x64/lamina-macos-x64.tar.gz
        token: ${{ secrets.GITHUB_TOKEN }}